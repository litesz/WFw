<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WFw</name>
    </assembly>
    <members>
        <member name="T:WFw.Cache.CacheExtensions">
            <summary>
            缓存扩展
            </summary>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.Get(WFw.Cache.ICache,System.String)">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.GetValue(WFw.Cache.ICache,System.String)">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.ContainsKey(WFw.Cache.ICache,System.String)">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.Set``1(WFw.Cache.ICache,System.String,``0,System.DateTimeOffset)">
            <summary>
            绝对过期设置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="absoluteExpiration"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.Set``1(WFw.Cache.ICache,System.String,``0,System.TimeSpan)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="absoluteExpirationRelativeToNow"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.Set``1(WFw.Cache.ICache,System.String,``0,System.Int32)">
            <summary>
            滑动过期设置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="slidingExpirationSec"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.GetOrCreate``1(WFw.Cache.ICache,System.String,System.Func{``0},System.Nullable{System.Int32})">
            <summary>
            获得或创建缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="func"></param>
            <param name="slidingExpirationSec"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.GetOrCreate``1(WFw.Cache.ICache,System.String,System.Func{``0},System.TimeSpan)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="func"></param>
            <param name="absoluteExpirationRelativeToNow"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheExtensions.GetOrCreate``1(WFw.Cache.ICache,System.String,System.Func{``0},System.DateTimeOffset)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="func"></param>
            <param name="absoluteExpiration"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Cache.CacheItemOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Cache.CacheItemOptions.AbsoluteExpiration">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Cache.CacheItemOptions.AbsoluteExpirationRelativeToNow">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Cache.CacheItemOptions.SlidingExpiration">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Cache.CacheItemOptions.GetAbsluteExpirationSecs">
            <summary>
            返回过期秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.CacheItemOptions.GetSlidingExpirationSecs">
            <summary>
            返回滑动过期秒
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.Cache.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:WFw.Cache.ICache.GetValue``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.ICache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Cache.ICache.Remove(System.String[])">
            <summary>
            移除
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:WFw.Cache.ICache.Set``1(System.String,``0,WFw.Cache.CacheItemOptions)">
            <summary>
            写入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:WFw.DbContext.DbOptions">
            <summary>
            数据库连接参数
            </summary>
        </member>
        <member name="F:WFw.DbContext.DbOptions.Position">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:WFw.DbContext.DbOptions.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:WFw.DbContext.DbOptions.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:WFw.DbContext.DbOptions.IsAutoSave">
            <summary>
            自动保存
            </summary>
        </member>
        <member name="P:WFw.DbContext.DbOptions.IsAutoCloseConnection">
            <summary>
            自动关闭连接
            </summary>
        </member>
        <member name="P:WFw.DbContext.DbOptions.InitKeyType">
            <summary>
            表初始化类型
            </summary>
        </member>
        <member name="P:WFw.DbContext.DbOptions.IsShardSameThread">
            <summary>
            共享内存
            </summary>
        </member>
        <member name="P:WFw.DbContext.DbOptions.StringDefaultIsNull">
            <summary>
            默认string在数据库中是否可为空
            </summary>
        </member>
        <member name="T:WFw.DbContext.DefaultAuditHandler`2">
            <summary>
            默认审计信息处理程序
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
        </member>
        <member name="P:WFw.DbContext.DefaultAuditHandler`2.IsSoftDelete">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.DbContext.DefaultAuditHandler`2.IConcurrencyStamp">
            <summary>
            同步标记
            </summary>
        </member>
        <member name="F:WFw.DbContext.DefaultAuditHandler`2.AddAuditedType">
            <summary>
            新增
            0 无
            1 时间
            2 时间 操作者
            </summary>
        </member>
        <member name="F:WFw.DbContext.DefaultAuditHandler`2.SoftAuditedType">
            <summary>
            删除
            0 无
            1 标识
            2 标识 时间
            3 标识 时间 操作者
            </summary>
        </member>
        <member name="F:WFw.DbContext.DefaultAuditHandler`2.UpdateAuditedType">
            <summary>
            更新
            0 无
            1 时间
            2 时间 操作者
            </summary>
        </member>
        <member name="M:WFw.DbContext.DefaultAuditHandler`2.InsertEntitiesAudit(WFw.Identity.ICurrentUser,`0[])">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="entities"></param>
        </member>
        <member name="M:WFw.DbContext.DefaultAuditHandler`2.UpdateEntitiesAudit(WFw.Identity.ICurrentUser,`0[])">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="entities"></param>
        </member>
        <member name="M:WFw.DbContext.DefaultAuditHandler`2.DeleteEntitiesAudit(WFw.Identity.ICurrentUser,`0[])">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.DbContext.DefaultRepository`1">
            <summary>
            默认仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`1.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:WFw.DbContext.DefaultRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`2.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:WFw.DbContext.DefaultRepository`3">
            <summary>
            默认仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
            <typeparam name="TAdudit"></typeparam>
        </member>
        <member name="P:WFw.DbContext.DefaultRepository`3.AuditHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.DbContext.DefaultRepository`3.CurrentUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.DbContext.DefaultRepository`3.DbContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="P:WFw.DbContext.DefaultRepository`3.Query">
            <summary>
            查询
            </summary>
        </member>
        <member name="P:WFw.DbContext.DefaultRepository`3.QueryNoFlag">
            <summary>
            查询(包含软删除)
            </summary>
        </member>
        <member name="P:WFw.DbContext.DefaultRepository`3.Ado">
            <summary>
            ado
            </summary>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.Delete(`0[])">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.Delete(`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.DeleteAsync(`0[])">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.DeleteAsync(`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.GetAllAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.GetFirst(`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.GetFirstAsync(`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.Init(`0[])">
            <summary>
            
            </summary>
            <param name="initData"></param>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.Insert(`0[])">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.InsertAsync(`0[])">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.InsertReturnId(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.InsertReturnIdAsync(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.Update(`0[])">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.UpdateAsync(`0[])">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.DbContext.DefaultRepository`3.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Dtos.Requests.LimitedResultRequestDto">
            <summary>
            限制查询大小
            </summary>
        </member>
        <member name="F:WFw.Dtos.Requests.LimitedResultRequestDto.pageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Dtos.Requests.LimitedResultRequestDto.PageSize">
            <summary>
            查询大小,1-1000
            </summary>
        </member>
        <member name="T:WFw.Dtos.Requests.PagedAndSortedResultRequestDto">
            <summary>
            排序分页查询
            </summary>
        </member>
        <member name="P:WFw.Dtos.Requests.PagedAndSortedResultRequestDto.Sorting">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:WFw.Dtos.Requests.PagedAndSortedResultRequestDto.IsAsc">
            <summary>
            是升序
            </summary>
        </member>
        <member name="T:WFw.Dtos.Requests.PagedResultRequestDto">
            <summary>
            分页查询
            </summary>
        </member>
        <member name="P:WFw.Dtos.Requests.PagedResultRequestDto.Skip">
            <summary>
            跳过内容
            </summary>
        </member>
        <member name="F:WFw.Dtos.Requests.PagedResultRequestDto.pageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Dtos.Requests.PagedResultRequestDto.PageIndex">
            <summary>
            索引，最小为1
            </summary>
        </member>
        <member name="T:WFw.Dtos.Requests.RequestDto">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Dtos.Requests.RequestDto.ValidateParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.Dtos.Responses.IdNameResponseDataDto`1">
            <summary>
            返回主键和名称
            </summary>
        </member>
        <member name="M:WFw.Dtos.Responses.IdNameResponseDataDto`1.#ctor(`0,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="M:WFw.Dtos.Responses.IdNameResponseDataDto`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Dtos.Responses.IdNameResponseDataDto`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:WFw.Dtos.Responses.IdResponseDataDto`1">
            <summary>
            返回主键
            </summary>
        </member>
        <member name="P:WFw.Dtos.Responses.IdResponseDataDto`1.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:WFw.Dtos.Responses.IdResponseDataDto`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:WFw.Dtos.Responses.IdResponseDataDto`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.Dtos.Responses.PagedResponseDataDto`1">
            <summary>
            分页结果
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:WFw.Dtos.Responses.PagedResponseDataDto`1.Total">
            <summary>
            总计
            </summary>
        </member>
        <member name="P:WFw.Dtos.Responses.PagedResponseDataDto`1.Items">
            <summary>
            项
            </summary>
        </member>
        <member name="P:WFw.Dtos.Responses.PagedResponseDataDto`1.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:WFw.Dtos.Responses.PagedResponseDataDto`1.PageSize">
            <summary>
            页尺寸
            </summary>
        </member>
        <member name="M:WFw.Dtos.Responses.PagedResponseDataDto`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Dtos.Responses.PagedResponseDataDto`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="total"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:WFw.Dtos.Responses.PagedResponseDataDto`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,WFw.IDtos.Requests.IPagedResultRequestDto)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="total"></param>
            <param name="request"></param>
        </member>
        <member name="M:WFw.Dtos.Responses.PagedResponseDataDto`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:WFw.Dtos.Responses.PagedResponseDataDto`1.#ctor(WFw.IDtos.Responses.IPagedResponseDataDto{`0})">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:WFw.Dtos.Responses.PagedResponseDataDto`1.#ctor(System.Collections.Generic.IEnumerable{`0},WFw.IDtos.Responses.IPagedReponseDto)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="reponse"></param>
        </member>
        <member name="T:WFw.IDbContext.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.IDbContext.Extensions.Delete``2(WFw.IDbContext.IRepository{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
            <param name="repository"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.Extensions.DeleteAsync``2(WFw.IDbContext.IRepository{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            异步删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
            <param name="repository"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.Extensions.Update``2(WFw.IDbContext.IRepository{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
            <param name="repository"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.Extensions.UpdateAsync``2(WFw.IDbContext.IRepository{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            异步更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
            <param name="repository"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.Extensions.Insert``2(WFw.IDbContext.IRepository{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            插入
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
            <param name="repository"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.Extensions.InsertAsync``2(WFw.IDbContext.IRepository{``0,``1},System.Collections.Generic.IList{``0})">
            <summary>
            异步插入
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
            <param name="repository"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.QueryableExtensions">
            <summary>
            查询扩展
            </summary>
        </member>
        <member name="M:WFw.IDbContext.QueryableExtensions.ToPageList``1(WFw.IDbContext.IWQueryable{``0},WFw.IDtos.Requests.IPagedResultRequestDto)">
            <summary>
            分页结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.QueryableExtensions.ToPageList``1(System.Collections.Generic.IEnumerable{``0},WFw.IDtos.Requests.IPagedResultRequestDto)">
            <summary>
            分页结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.QueryableExtensions.ToPageListAsync``1(WFw.IDbContext.IWQueryable{``0},WFw.IDtos.Requests.IPagedResultRequestDto)">
            <summary>
            分页结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.IAdo">
            <summary>
            ado
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IAdo.SqlQuery``1(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IAdo.SqlQueryAsync``1(System.String,System.Object)">
            <summary>
             执行sql语句
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IAdo.ExecuteCommand(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IAdo.ExecuteCommandAsync(System.String,System.Object)">
            <summary>
            执行sql语句
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IAdo.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IAdo.CommitTransaction">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IAdo.RollBackTransaction">
            <summary>
            回滚
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IAdo.UseTran(System.Action,System.Action{System.Exception})">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="errorCallBack"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IAdo.UseTran``1(System.Func{``0},System.Action{System.Exception})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="errorCallBack"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IAdo.UseTranAsync(System.Action,System.Action{System.Exception})">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="errorCallBack"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IAdo.UseTranAsync``1(System.Func{``0},System.Action{System.Exception})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="errorCallBack"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.IAuditHandler`2">
            <summary>
            默认审计信息处理程序
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimary"></typeparam>
        </member>
        <member name="P:WFw.IDbContext.IAuditHandler`2.IsSoftDelete">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IAuditHandler`2.InsertEntitiesAudit(WFw.Identity.ICurrentUser,`0[])">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="entities"></param>
        </member>
        <member name="M:WFw.IDbContext.IAuditHandler`2.UpdateEntitiesAudit(WFw.Identity.ICurrentUser,`0[])">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="entities"></param>
        </member>
        <member name="M:WFw.IDbContext.IAuditHandler`2.DeleteEntitiesAudit(WFw.Identity.ICurrentUser,`0[])">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.IRepository`1">
            <summary>
            数据库上下文
            </summary>
            <typeparam name="TEntity">实体</typeparam>
        </member>
        <member name="T:WFw.IDbContext.IRepository`2">
            <summary>
            数据库上下文
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TPrimary">主键</typeparam>
        </member>
        <member name="T:WFw.IDbContext.IRepository`3">
            <summary>
            数据库上下文
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <typeparam name="TPrimary">主键</typeparam>
            <typeparam name="TAdudit">账号主键</typeparam>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.Init(`0[])">
            <summary>
            初始化表格
            </summary>
            <param name="initData"></param>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.InsertReturnId(`0)">
            <summary>
            插入实体并返回主键
            </summary>
            <param name="entity">实体对象</param>
            <returns>实体对象主键</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.Insert(`0[])">
            <summary>
            插入实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数是否大于0</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.Delete(`0[])">
            <summary>
            删除实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.Delete(`1)">
            <summary>
            删除指定编号的实体
            </summary>
            <param name="key">实体主键</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.Update(`0[])">
            <summary>
            更新实体对象
            </summary>
            <param name="entities">更新后的实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.GetFirst(`1)">
            <summary>
            查找指定主键的实体
            </summary>
            <param name="key">实体主键</param>
            <returns>符合主键的实体，不存在时返回null</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找第一个符合条件的数据
            </summary>
            <param name="predicate">数据查询谓语表达式</param>
            <returns>符合条件的实体，不存在时返回null</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.InsertReturnIdAsync(`0)">
            <summary>
            插入实体并返回主键
            </summary>
            <param name="entity">实体对象</param>
            <returns>实体对象主键</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.InsertAsync(`0[])">
            <summary>
            插入实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数是否大于0</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.DeleteAsync(`0[])">
            <summary>
            删除实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.DeleteAsync(`1)">
            <summary>
            删除指定编号的实体
            </summary>
            <param name="key">实体主键</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.UpdateAsync(`0[])">
            <summary>
            更新实体对象
            </summary>
            <param name="entities">更新后的实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.GetFirstAsync(`1)">
            <summary>
            查找指定主键的实体
            </summary>
            <param name="key">实体主键</param>
            <returns>符合主键的实体，不存在时返回null</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找第一个符合条件的数据
            </summary>
            <param name="predicate">数据查询谓语表达式</param>
            <returns>符合条件的实体，不存在时返回null</returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.GetAllAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:WFw.IDbContext.IRepository`3.Query">
            <summary>
            查询
            </summary>
        </member>
        <member name="P:WFw.IDbContext.IRepository`3.QueryNoFlag">
            <summary>
            查询(包含软删除)
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IRepository`3.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:WFw.IDbContext.IRepository`3.Ado">
            <summary>
            ADO
            </summary>
        </member>
        <member name="T:WFw.IDbContext.IWDbContext">
            <summary>
            抽象上下文
            </summary>
        </member>
        <member name="P:WFw.IDbContext.IWDbContext.Ado">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.Init``1(``0[])">
            <summary>
            初始化表格
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="initData"></param>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.InitDatabase">
            <summary>
            如果不存在创建数据库
            </summary>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.Queryable``1">
            <summary>
            查询
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.Deletable``1">
            <summary>
            删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.Deletable``1(System.Object[])">
            <summary>
            删除
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.Updatable``1">
            <summary>
            更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.Updatable``1(``0[])">
            <summary>
            更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWDbContext.Insertable``1(``0[])">
            <summary>
            插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="insertObjs"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.IWDeletable`1">
            <summary>
            删除
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WFw.IDbContext.IWDeletable`1.ExecuteCommand">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWDeletable`1.ExecuteCommandAsync">
            <summary>
            异步执行
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.IWInsertable`1">
            <summary>
            插入
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteCommand">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteCommandAsync">
            <summary>
            异步执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteReturnIdentity">
            <summary>
            执行返回int主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteReturnIdentityAsync">
            <summary>
            异步执行返回int主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteReturnLongIdentity">
            <summary>
            执行返回long主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteReturnLongIdentityAsync">
            <summary>
            异步执行返回long主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteCommandIdentityIntoEntity">
            <summary>
            执行，主键插入实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWInsertable`1.ExecuteCommandIdentityIntoEntityAsync">
            <summary>
            异步执行，主键插入实体
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.IWQueryable`1">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.As(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Where(System.String)">
            <summary>
            条件
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.WhereIF(System.Boolean,System.String)">
            <summary>
            条件
            </summary>
            <param name="isWhere"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.WhereIF(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件
            </summary>
            <param name="isWhere"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="expression"></param>
            <param name="isAsc"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.OrderByIF(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="isOrderBy"></param>
            <param name="expression"></param>
            <param name="isAsc"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            排序
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.OrderByIF(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            排序
            </summary>
            <param name="isOrderBy"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            倒叙排列
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.OrderByDescendingIF(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            排序
            </summary>
            <param name="isOrderBy"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Skip(System.Int32)">
            <summary>
            跳过
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Take(System.Int32)">
            <summary>
            取指定长度
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Single">
            <summary>
            唯一
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            唯一
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.SingleAsync">
            <summary>
            异步唯一
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步唯一
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Any">
            <summary>
            是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.AnyAsync">
            <summary>
            异步是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步是否存在
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.First">
            <summary>
            第一条
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            第一条
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.FirstAsync">
            <summary>
            异步第一条
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步第一条
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            选择
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Count">
            <summary>
            计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            计数
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.CountAsync">
            <summary>
            异步计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步计数
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.ToList">
            <summary>
            转list
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.ToListAsync">
            <summary>
            异步转list
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.ToArray">
            <summary>
            转array
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.ToPageList(System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.ToPageListAsync(System.Int32,System.Int32)">
            <summary>
            异步分页查询
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWQueryable`1.ToSql">
            <summary>
            获得sql
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.IWUpdatable`1">
            <summary>
            更新
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WFw.IDbContext.IWUpdatable`1.ExecuteCommand">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWUpdatable`1.ExecuteCommandAsync">
            <summary>
            异步执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWUpdatable`1.SetColumns(System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            指定列
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.IDbContext.IWUpdatable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断条件
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.IDbContext.TranResult`1">
            <summary>
            事务运行结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WFw.IDbContext.TranResult`1.IsSuccess">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.IDbContext.TranResult`1.ErrorException">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.IDbContext.TranResult`1.ErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.IDbContext.TranResult`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.ApplicationBuilderExtensions">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:WFw.ApplicationBuilderExtensions.UseErrorHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用全局错误
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ApplicationBuilderExtensions.UseWFwCurrentUser(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加获得当前用户信息中间件
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ApplicationBuilderExtensions.Init(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceScope})">
            <summary>
            使用线程作用域初始化
            </summary>
            <param name="builder"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ApplicationBuilderExtensions.Init(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{System.IServiceProvider})">
            <summary>
            使用线程作用域的IServiceProvider初始化
            </summary>
            <param name="builder"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ApplicationBuilderExtensions.Init(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{System.IServiceProvider,System.IServiceProvider})">
            <summary>
            使用全局作用域的IServiceProvider和线程作用域的IServiceProvider初始化
            </summary>
            <param name="builder"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.ServiceCollectionExtensions">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:WFw.ServiceCollectionExtensions.AddWFwCurrentUser(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加当前用户信息中间件
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ServiceCollectionExtensions.ConfigureModelStateResponse(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            统一模型验证返回值
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Identity.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Identity.Extensions.Get(WFw.Identity.ICurrentUser,System.String)">
            <summary>
            以字符串获得
            </summary>
            <param name="currentUser"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetInt(WFw.Identity.ICurrentUser,System.String)">
            <summary>
            以int32获得
            </summary>
            <param name="currentUser"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetLong(WFw.Identity.ICurrentUser,System.String)">
            <summary>
            以int64获得
            </summary>
            <param name="currentUser"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetBool(WFw.Identity.ICurrentUser,System.String)">
            <summary>
            以布尔获得
            </summary>
            <param name="currentUser"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetIntUserId(WFw.Identity.ICurrentUser)">
            <summary>
            
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetLongUserId(WFw.Identity.ICurrentUser)">
            <summary>
            
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetGuidUserId(WFw.Identity.ICurrentUser)">
            <summary>
            
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetIntGroupId(WFw.Identity.ICurrentUser)">
            <summary>
            
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetLongGroupId(WFw.Identity.ICurrentUser)">
            <summary>
            
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GetGuidGroupId(WFw.Identity.ICurrentUser)">
            <summary>
            
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.UserIdAs``1(WFw.Identity.ICurrentUser)">
            <summary>
            泛型用户id
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.Extensions.GroupIdAs``1(WFw.Identity.ICurrentUser)">
            <summary>
            泛型组id
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:WFw.Identity.CurrentUser">
            <summary>
            当前用户信息
            </summary>
        </member>
        <member name="F:WFw.Identity.CurrentUser._claims">
            <summary>
            票据集合
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.IsAuthenticated">
            <summary>
            已登录
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.GroupId">
            <summary>
            组id
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.PGroupId">
            <summary>
            主组id
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.Name">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.GroupIds">
            <summary>
            组id
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.UserId">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.SId">
            <summary>
            安全id
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.Phone">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:WFw.Identity.CurrentUser.Roles">
            <summary>
            角色
            </summary>
        </member>
        <member name="M:WFw.Identity.CurrentUser.AddClaim(System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:WFw.Identity.CurrentUser.AddClaim(System.Security.Claims.Claim)">
            <summary>
            添加
            </summary>
            <param name="claim"></param>
        </member>
        <member name="M:WFw.Identity.CurrentUser.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            添加
            </summary>
            <param name="claims"></param>
        </member>
        <member name="P:WFw.Identity.CurrentUser.Item(System.String)">
            <summary>
            获得
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.CurrentUser.ContainRole(System.String)">
            <summary>
            是否包含指定角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.CurrentUser.Get``1(System.String)">
            <summary>
            获得
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.CurrentUser.GetArray``1(System.String)">
            <summary>
            获得数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.CurrentUser.GetByOrder(System.String[])">
            <summary>
            顺序获得
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.CurrentUser.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:WFw.Identity.CurrentUser.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WFw.Identity.CurrentUser.AddOrUpdate(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:WFw.Identity.ICurrentUser">
            <summary>
            当前用户信息
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.IsAuthenticated">
            <summary>
            是否已登录
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.PGroupId">
            <summary>
            主要组
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.Name">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.GroupId">
            <summary>
            组号
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.GroupIds">
            <summary>
            组号
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.UserId">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.Roles">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.SId">
            <summary>
            安全id
            </summary>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.Phone">
            <summary>
            手机号
            </summary>
        </member>
        <member name="M:WFw.Identity.ICurrentUser.Get``1(System.String)">
            <summary>
            获得claim值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.ICurrentUser.AddClaim(System.String,System.String)">
            <summary>
            添加claim值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:WFw.Identity.ICurrentUser.Item(System.String)">
            <summary>
            获得claim值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.ICurrentUser.ContainRole(System.String)">
            <summary>
            是否包含角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.ICurrentUser.GetArray``1(System.String)">
            <summary>
            获得数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Identity.ICurrentUser.Clear">
            <summary>
            清理所有
            </summary>
        </member>
        <member name="M:WFw.Identity.ICurrentUser.Remove(System.String)">
            <summary>
            清理指定
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WFw.Identity.ICurrentUser.AddOrUpdate(System.String,System.String)">
            <summary>
            替换
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:WFw.Identity.UserClaimTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Identity.UserClaimTypes.GroupId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Identity.UserClaimTypes.PGroupId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Identity.UserClaimTypes.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Identity.UserClaimTypes.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Identity.UserClaimTypes.Phone">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Identity.UserClaimTypes.Role">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Identity.UserClaimTypes.SId">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.Identity.WFwCurrentUserEvents">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.Identity.WFwCurrentUserMiddleware">
            <summary>
            登录用户信息中间件
            </summary>
        </member>
        <member name="M:WFw.Identity.WFwCurrentUserMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:WFw.Identity.WFwCurrentUserMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,WFw.Identity.ICurrentUser)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="_currentIdentity"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.WFwResultExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.WFwResultExtensions.ToWFwErrApiResult(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.HttpHeaderConst">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.HttpHeaderConst.RequestId">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.HttpHeaderConst.ErrResultType">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.IDtos.IDto">
            <summary>
            dto约束
            </summary>
        </member>
        <member name="T:WFw.IDtos.Requests.ILimitedResultRequestDto">
            <summary>
            限制查询大小
            </summary>
        </member>
        <member name="P:WFw.IDtos.Requests.ILimitedResultRequestDto.PageSize">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="T:WFw.IDtos.Requests.IPagedAndSortedResultRequestDto">
            <summary>
            排序分页查询
            </summary>
        </member>
        <member name="P:WFw.IDtos.Requests.IPagedAndSortedResultRequestDto.Sorting">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:WFw.IDtos.Requests.IPagedAndSortedResultRequestDto.IsAsc">
            <summary>
            升序/降序
            </summary>
        </member>
        <member name="T:WFw.IDtos.Requests.IPagedResultRequestDto">
            <summary>
            分页查询
            </summary>
        </member>
        <member name="P:WFw.IDtos.Requests.IPagedResultRequestDto.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:WFw.IDtos.Requests.IPagedResultRequestDto.Skip">
            <summary>
            已跳过多少条记录
            </summary>
        </member>
        <member name="T:WFw.IDtos.Requests.IRequestDto">
            <summary>
            请求dto
            </summary>
        </member>
        <member name="M:WFw.IDtos.Requests.IRequestDto.ValidateParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.IDtos.Responses.IPagedReponseDto">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.IDtos.Responses.IPagedReponseDto.Total">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.IDtos.Responses.IPagedReponseDto.PageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.IDtos.Responses.IPagedReponseDto.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.IDtos.Responses.IPagedResponseDataDto`1">
            <summary>
            分页查询数据
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:WFw.IDtos.Responses.IPagedResponseDataDto`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.IDtos.Responses.IResponseDataDto">
            <summary>
            返回值数据对象dto标注
            </summary>
        </member>
        <member name="T:WFw.IDtos.Responses.IResponseDto">
            <summary>
            返回值dto
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.ICreatedAudited">
            <summary>
            新增
            </summary>
        </member>
        <member name="P:WFw.IEntity.IAudit.ICreatedAudited.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.ICreatedAuditedByUser`1">
            <summary>
            带人员的新增
            </summary>
            <typeparam name="TUserId"></typeparam>
        </member>
        <member name="P:WFw.IEntity.IAudit.ICreatedAuditedByUser`1.CreatedUserId">
            <summary>
            创建人
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.IOnlyNewAudited">
            <summary>
            仅新增，修改
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.IOnlyNewAuditedByUser`1">
            <summary>
            仅新增，修改
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:WFw.IEntity.IAudit.ISoftDeletable">
            <summary>
            软删除
            </summary>
        </member>
        <member name="P:WFw.IEntity.IAudit.ISoftDeletable.DeletedTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.ISoftDeletableByUser`1">
            <summary>
            带人软删除
            </summary>
            <typeparam name="TUserId"></typeparam>
        </member>
        <member name="P:WFw.IEntity.IAudit.ISoftDeletableByUser`1.DeletedUserId">
            <summary>
            删除人
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.ISoftDeletableFlag">
            <summary>
            仅软删除标志
            </summary>
        </member>
        <member name="P:WFw.IEntity.IAudit.ISoftDeletableFlag.IsDeleted">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.IUpdatedAudited">
            <summary>
            更新
            </summary>
        </member>
        <member name="P:WFw.IEntity.IAudit.IUpdatedAudited.UpdatedTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:WFw.IEntity.IAudit.IUpdatedAuditedByUser`1">
            <summary>
            带人员的更新
            </summary>
            <typeparam name="TUserId"></typeparam>
        </member>
        <member name="P:WFw.IEntity.IAudit.IUpdatedAuditedByUser`1.UpdatedUserId">
            <summary>
            更新人员
            </summary>
        </member>
        <member name="T:WFw.IEntity.IFullAudit">
            <summary>
            仅状态审计接口
            </summary>
        </member>
        <member name="T:WFw.IEntity.IFullAuditByUser`1">
            <summary>
            完整审计接口
            </summary>
            <typeparam name="TUserId"></typeparam>
        </member>
        <member name="T:WFw.IEntity.IConcurrencyStamp">
            <summary>
            同步标记
            </summary>
        </member>
        <member name="P:WFw.IEntity.IConcurrencyStamp.ConcurrencyStamp">
            <summary>
            同步标记
            </summary>
        </member>
        <member name="T:WFw.IEntity.IEntity`1">
            <summary>
            主键
            </summary>
            <typeparam name="TPrimary"></typeparam>
        </member>
        <member name="P:WFw.IEntity.IEntity`1.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:WFw.IEntity.IRemark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:WFw.IEntity.IRemark.Remark">
            <summary>
            备注信息
            </summary>
        </member>
        <member name="T:WFw.ISms.ISmsClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.ISms.ISmsClient.SendVerification(System.String,System.Int32,System.String)">
            <summary>
            发送验证码
            </summary>
            <param name="code"></param>
            <param name="expireMin"></param>
            <param name="phone"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ISms.ISmsClient.SendSms(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="phone"></param>
            <param name="templateId"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ISms.ISmsClient.GetMessageRemaining">
            <summary>
            剩余短信数
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.Middlewares.WFwErrorHandlingMiddleware">
            <summary>
            错误处理中间件
            </summary>
        </member>
        <member name="M:WFw.Middlewares.WFwErrorHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:WFw.Middlewares.WFwErrorHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Microsoft.Extensions.Logging.ILogger{WFw.Middlewares.WFwErrorHandlingMiddleware})">
            <summary>
            执行
            </summary>
            <param name="context"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Middlewares.WFwErrorHandlingMiddleware.WriteError(Microsoft.AspNetCore.Http.HttpContext,WFw.Results.OperationResultType,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="message"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Mvc.ApiController">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Mvc.ApiController.WFwErrApiResult(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Mvc.ApiController.WFwErrApiResult(WFw.Results.OperationResultType,System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Mvc.WFwApiResult`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Mvc.WFwApiResult`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:WFw.Mvc.WFwErrApiResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Mvc.WFwErrApiResult.#ctor(WFw.Results.IErrApirResult)">
            <summary>
            
            </summary>
            <param name="errApirResult"></param>
        </member>
        <member name="M:WFw.Mvc.WFwErrApiResult.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:WFw.Mvc.WFwErrApiResult.#ctor(WFw.Results.OperationResultType,System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="msg"></param>
        </member>
        <member name="M:WFw.Mvc.WFwErrApiResult.#ctor(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String[]}})">
            <summary>
            
            </summary>
            <param name="errors"></param>
        </member>
        <member name="T:WFw.Results.CheckParam">
            <summary>
            参数检查
            </summary>
        </member>
        <member name="M:WFw.Results.CheckParam.NotNull``1(``0,System.String)">
            <summary>
            不为空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="name"></param>
        </member>
        <member name="T:System.Linq.HttpContextExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Linq.HttpContextExtensions.IsAjax(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是ajax
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.HttpContextExtensions.IsWap(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是手机端
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.LinqExtensions">
            <summary>
            linq扩展
            </summary>
        </member>
        <member name="M:System.Linq.LinqExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            判断条件查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="isUse"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.LinqExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},WFw.IDtos.Requests.IPagedResultRequestDto)">
            <summary>
            分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
    </members>
</doc>
