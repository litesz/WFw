<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WFw.Redis</name>
    </assembly>
    <members>
        <member name="T:WFw.ServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.ServiceCollectionExtensions.AddWFwRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加redis
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ServiceCollectionExtensions.AddWFwRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{WFw.Redis.Options.RedisOptions})">
            <summary>
            添加redis
            </summary>
            <param name="services"></param>
            <param name="configureOptions"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.ServiceCollectionExtensions.TryAddService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Redis.EnumExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Redis.EnumExtensions.ToCSRedisAggregate(WFw.Redis.RedisAggregateType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.EnumExtensions.ToGeoUnit(WFw.Redis.GeoUnit)">
            <summary>
            
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Redis.WFwRedisCacheGeoExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Redis.WFwRedisCacheGeoExtensions.GeoAdd(WFw.Redis.IRedisCache,System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            用于存储指定的地理空间位置
            </summary>
            <param name="cache">redis对象</param>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">位置名称</param>
            <returns></returns>
        </member>
        <member name="T:WFw.Redis.WFwRedisCacheHashExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Redis.WFwRedisCacheHashExtensions.HGet(WFw.Redis.IRedisCache,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCacheHashExtensions.HGetValue(WFw.Redis.IRedisCache,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCacheHashExtensions.HSet``1(WFw.Redis.IRedisCache,System.String,System.String,``0,System.DateTimeOffset)">
            <summary>
            绝对过期设置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
            <param name="absoluteExpiration"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCacheHashExtensions.HSet``1(WFw.Redis.IRedisCache,System.String,System.String,``0,System.TimeSpan)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
            <param name="absoluteExpirationRelativeToNow"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCacheHashExtensions.HSet``1(WFw.Redis.IRedisCache,System.String,System.String,``0,System.Int32)">
            <summary>
            滑动过期设置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
            <param name="slidingExpirationSec"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCacheHashExtensions.HmGet(WFw.Redis.IRedisCache,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="T:WFw.Redis.WFwRedisCacheStringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="T:WFw.Redis.IRedisCache">
            <summary>
            Connection
            </summary>
            <summary>
            key
            </summary>
            <summary>
            Geo
            </summary>
            <summary>
            Geo
            </summary>
            <summary>
            hash
            </summary>
            <summary>
            HyperLogLog
            </summary>
            <summary>
            key
            </summary>
            <summary>
            list
            </summary>
            <summary>
            list
            </summary>
            <summary>
            lua
            </summary>
            <summary>
            pubsub
            </summary>
            <summary>
            server
            </summary>
            <summary>
            set
            </summary>
            <summary>
            set
            </summary>
            <summary>
            stream
            </summary>
            <summary>
            string
            </summary>
            <summary>
            string
            </summary>
            <summary>
            tran
            </summary>
            <summary>
            sortedset
            </summary>
            <summary>
            sortedset
            </summary>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Echo(System.String)">
            <summary>
            打印给定的字符串。
            </summary>
            <param name="msg">给定的字符串</param>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Ping">
            <summary>
            命令使用客户端向 Redis 服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 PONG 
            </summary>
            <returns>如果连接正常就返回一个 true ，否则返回一个连接错误</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoAdd(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            用于存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">经度(longitude)、纬度(latitude)、位置名称(member)</param>
            <returns>成功添加数</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoDist(System.String,System.Object,System.Object,WFw.Redis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形
            </summary>
            <param name="key"> 不含prefix前辍</param>
            <param name="member1"> 成员1</param>
            <param name="member2"> 成员2</param>
            <param name="unit"></param>
            <returns>返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoPos(System.String,System.Object[])">
            <summary>
            用于从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">位置名称</param>
            <returns>经度(longitude)、纬度(latitude)</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadius(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusWithDist(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusWithDistAndCoord(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离，经度，纬度</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusByMember(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
             以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusByMemberWithDist(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
             以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
             以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离，经度，纬度</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoHash(System.String,System.Object[])">
            <summary>
            使用 geohash 来保存地理位置的坐标
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">成员</param>
            <returns>位置元素的 geohash 值</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadius``1(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusWithDist``1(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusWithDistAndCoord``1(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离，经度，纬度</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusByMember``1(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
             以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
             以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
             以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit"> m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时，即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的</param>
            <param name="sorting">排序</param>
            <returns>位置元素，位置元素与中心之间的距离，经度，纬度</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="fields">一个或多个字段</param>
            <returns>被成功删除字段的数量，不包括被忽略的字段。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="field">一个或多个字段</param>
            <returns>如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="field">指定字段</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HGetValue``1(System.String,System.String)">
             <summary>
            获取存储在哈希表中指定字段的值。
             </summary>
             <typeparam name="T"></typeparam>
             <param name="key">不含prefix前缀</param>
             <param name="field">指定字段</param>
             <returns>返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="field">指定字段</param>
            <param name="increment">增量</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的浮点数值加上增量 increment 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="field">指定字段</param>
            <param name="increment">增量</param>
            <returns>执行 HINCRBY 命令之后，哈希表中字段的值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>哈希表中的字段</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key"></param>
            <returns>哈希表中字段的数量</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HSet``1(System.String,System.String,``0,WFw.Cache.CacheItemOptions)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value 。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="field">指定字段</param>
            <param name="value">值</param>
            <param name="options">过期设置</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HmSet(System.String,System.Object[],WFw.Cache.CacheItemOptions)">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中。
            </summary>
            <param name="key"></param>
            <param name="keyValues"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HmGet``1(System.String,System.String[])">
            <summary>
            获取所有给定字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="field">一个或多个指定字段</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HSetNx``1(System.String,System.String,``0,WFw.Cache.CacheItemOptions)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="field">指定字段</param>
            <param name="value"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.HScan``1(System.String,System.Int64,System.String,System.Int64)">
            <summary>
            迭代哈希表中的键值对。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">指定模式</param>
            <param name="count">数组长度</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.PfAdd``1(System.String,``0[])">
            <summary>
            将所有元素参数添加到 HyperLogLog 数据结构中。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="elements">元素参数</param>
            <returns>如果至少有个元素被添加返回 1， 否则返回 0。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值。注意：分区模式下，若keys分散在多个分区节点时，将报错。
            </summary>
            <param name="keys"></param>
            <returns>返回给定 HyperLogLog 的基数值，如果多个 HyperLogLog 则返回基数估值之和。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns>返回true。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Del(System.String[])">
            <summary>
            该命令用于在 key 存在时删除 key。
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns>被删除 key 的数量</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Exists(System.String)">
            <summary>
            检查给定 key 是否存在。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>若 key 存在返回 true ，否则返回 false 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>如果 key 不存在，那么返回 nil 。 否则，返回序列化之后的值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间，以秒计
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="seconds">过期时间（秒）</param>
            <returns>设置成功返回 true 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 false 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ExpireAt(System.String,System.DateTime)">
            <summary>
            EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="expire">过期时间</param>
            <returns>设置成功返回 true 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 false 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.PExpire(System.String,System.Int32)">
            <summary>
            设置 key 的过期时间以毫秒计。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="milliseconds">过期时间（毫秒）</param>
            <returns>设置成功返回 true 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 false 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.PExpireAt(System.String,System.DateTime)">
            <summary>
            设置 key 过期时间的时间戳(unix timestamp) 以毫秒计
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="expire">过期时间</param>
            <returns>设置成功返回 true 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 false 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Keys(System.String)">
            <summary>
            查找所有符合给定模式( pattern)的 key 。 
            </summary>
            <param name="pattern">给定模式</param>
            <returns>符合给定模式的 key 列表 (Array)。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="db">db库</param>
            <returns>移动成功返回 true ，失败则返回 false 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>当过期时间移除成功时，返回 true 。 如果 key 不存在或 key 没有设置过期时间，返回 false 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns> 当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。
            注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns> 当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。
            注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RandomKey">
            <summary>
            从当前数据库中随机返回一个 key 
            </summary>
            <returns>当数据库不为空时，返回一个 key 。 当数据库为空时，返回 nil （windows 系统返回 null）。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧key，不含prefix前缀</param>
            <param name="newKey">新key，不含prefix前缀</param>
            <returns> 改名成功时提示 true ，失败时候返回一个错误。
            当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。 当 NEW_KEY_NAME 已经存在时， RENAME 命令将覆盖旧值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RenameNx(System.String,System.String)">
            <summary>
            仅当 newkey 不存在时，将 key 改名为 newkey
            </summary>
            <param name="key">旧key，不含prefix前缀</param>
            <param name="newKey">新key，不含prefix前缀</param>
            <returns>修改成功时，返回 true 。 如果 NEW_KEY_NAME 已经存在，返回 false 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Scan(System.Int64,System.String,System.Int64)">
            <summary>
             Redis Scan 命令用于迭代数据库中的数据库键。
             SCAN 命令是一个基于游标的迭代器，每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数， 以此来延续之前的迭代过程。
             SCAN 返回一个包含两个元素的数组， 第一个元素是用于进行下一次迭代的新游标， 而第二个元素则是一个数组， 这个数组中包含了所有被迭代的元素。如果新游标返回 0 表示迭代已结束。
            </summary>
            <param name="cursor">指针</param>
            <param name="pattern">模式</param>
            <param name="count">数组长度</param>
            <returns>数组列表。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>
             返回 key 的数据类型，数据类型有：
             none(key不存在)
             string (字符串)
             list(列表)
             set(集合)
             zset(有序集)
             hash(哈希表)
            </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.BLPop(System.Int32,System.String[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.BRPop(System.Int32,System.String[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <param name="timeout">超时(秒)</param>
            <returns>假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 否则，返回被弹出元素的值。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="index">索引</param>
            <returns>列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。
            当列表不存在时，被视为空列表，不执行任何操作。
            如果 key 不是列表类型，返回一个错误。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="pivot">列表元素</param>
            <param name="value">新元素</param>
            <returns>如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。
            当列表不存在时，被视为空列表，不执行任何操作。
            如果 key 不是列表类型，返回一个错误。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="pivot">列表元素</param>
            <param name="value">新元素</param>
            <returns>如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LLen(System.String)">
            <summary>
            返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 如果 key 不是列表类型，返回一个错误
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LPop(System.String)">
            <summary>
            移除并返回列表的第一个元素。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>列表的第一个元素。 当列表 key 不存在时，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LPush``1(System.String,``0[])">
            <summary>
            命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="values">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LPushX``1(System.String,``0)">
            <summary>
             将一个值插入到已存在的列表头部，列表不存在时操作无效。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="value">值</param>
            <returns>LPUSHX 命令执行之后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="start">开始位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <param name="stop">结束位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <returns>一个列表，包含指定区间内的元素。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LRem(System.String,System.Int64,System.Object)">
            <summary>
             Redis Lrem 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。
             COUNT 的值可以是以下几种：<![CDATA[
                 count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
                 count< 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
                 count = 0 : 移除表中所有与 VALUE 相等的值。
                 ]]>
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="count"><![CDATA[ count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
            count< 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
            count = 0 : 移除表中所有与 VALUE 相等的值。]]>
            </param>
            <param name="value">值</param>
            <returns>被移除元素的数量。 列表不存在时返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引来设置元素的值。
            当索引参数超出范围，或对一个空列表进行 LSET 时，返回一个错误。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns>操作成功返回 ok ，否则返回错误信息。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
            下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>命令执行成功时，返回 ok 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RPop(System.String)">
            <summary>
            移除列表的最后一个元素，返回值为移除的元素。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns> 被移除的元素。
            当列表不存在时，返回 nil</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RPopLPush(System.String,System.String)">
            <summary>
            移除列表的最后一个元素，并将该元素添加到另一个列表并返回。 
            </summary>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <returns>被弹出的元素。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RPush``1(System.String,``0[])">
            <summary>
            命令将一个或多个值插入到列表尾部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="values">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RPushX``1(System.String,``0)">
            <summary>
            将一个值插入到已存在的列表尾部，列表不存在时操作无效。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="value">值</param>
            <returns>RPUSHX 命令执行之后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.BLPop``1(System.Int32,System.String[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.BRPop``1(System.Int32,System.String[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <param name="timeout">超时(秒)</param>
            <returns>假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 否则，返回被弹出元素的值。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="index">索引</param>
            <returns>列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LPop``1(System.String)">
            <summary>
            移除并返回列表的第一个元素。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>列表的第一个元素。 当列表 key 不存在时，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="start">开始位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <param name="stop">结束位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <returns>一个列表，包含指定区间内的元素。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RPop``1(System.String)">
            <summary>
            移除列表的最后一个元素，返回值为移除的元素。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <returns> 被移除的元素 当列表不存在时，返回 nil</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.RPopLPush``1(System.String,System.String)">
            <summary>
            移除列表的最后一个元素，并将该元素添加到另一个列表并返回。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <returns>被弹出的元素。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Eval(System.String,System.String,System.Object[])">
            <summary>
            使用 Lua 解释器执行脚本。
            </summary>
            <param name="script"> Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            根据给定的 sha1 校验码，执行缓存在服务器中的脚本。
            将脚本缓存到服务器的操作可以通过 SCRIPT LOAD 命令进行。
            </summary>
            <param name="sha1"> 通过 SCRIPT LOAD 生成的 sha1 校验码。</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args"></param>
            <returns>附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ScriptExists(System.String[])">
            <summary>
            用于校验指定的脚本是否已经被保存在缓存当中。
            </summary>
            <param name="sha1s">通过 SCRIPT LOAD 生成的 sha1 校验码。</param>
            <returns> 一个列表，包含 0 和 1 ，前者表示脚本不存在于缓存，后者表示脚本已经在缓存里面了。
            列表中的元素和给定的 SHA1 校验和保持对应关系，比如列表的第三个元素的值就表示第三个 SHA1 校验和所指定的脚本在缓存中的状态。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ScriptFlush">
            <summary>
            清除所有 Lua 脚本缓存。
            </summary>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ScriptKill">
            <summary>
            杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。
            这个命令主要用于终止运行时间过长的脚本，比如一个因为 BUG 而发生无限循环的脚本。
            SCRIPT KILL 执行之后，当前正在运行的脚本会被杀死，执行这个脚本的客户端会从 EVAL 命令的阻塞当中退出，并收到一个错误作为返回值。 
            </summary>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ScriptLoad(System.String)">
            <summary>
            用于将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。
            EVAL 命令也会将脚本添加到脚本缓存中，但是它会立即对输入的脚本进行求值。
            如果给定的脚本已经在缓存里面了，那么不执行任何操作。
            在脚本被加入到缓存之后，通过 EVALSHA 命令，可以使用脚本的 SHA1 校验和来调用这个脚本。
            脚本可以在缓存中保留无限长的时间，直到执行 SCRIPT FLUSH 为止。 
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SAdd``1(System.String,``0[])">
            <summary>
            将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。
            假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。
            当集合 key 不是集合类型时，返回一个错误。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="members">一个或多个成员</param>
            <returns>被添加到集合中的新元素的数量，不包括被忽略的元素。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Scard(System.String)">
            <summary>
            返回集合中元素的数量。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>集合的数量。 当集合 key 不存在时，返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SDiff(System.String[])">
            <summary>
            返回第一个集合与其他集合之间的差异，也可以认为说第一个集合中独有的元素。不存在的集合 key 将视为空集。
            差集的结果来自前面的 FIRST_KEY, 而不是后面的 OTHER_KEY1，也不是整个 FIRST_KEY OTHER_KEY1..OTHER_KEYN 的差集。
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns>包含差集成员的列表。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SDiffStore(System.String,System.String[])">
            <summary>
            将给定集合之间的差集存储在指定的集合中。如果指定的集合 key 已存在，则会被覆盖
            </summary>
            <param name="destination">指定的集合</param>
            <param name="keys">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SInter(System.String[])">
            <summary>
            返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。 
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns>交集成员的列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SInterStore(System.String,System.String[])">
            <summary>
            将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖。
            </summary>
            <param name="destination">指定的集合</param>
            <param name="keys">不含prefix前缀</param>
            <returns>返回存储交集的集合的元素数量</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SIsMember``1(System.String,``0)">
            <summary>
            判断成员元素是否是集合的成员。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="member">成员</param>
            <returns>如果成员元素是集合的成员，返回 1 。 如果成员元素不是集合的成员，或 key 不存在，返回 0</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SMembers(System.String)">
            <summary>
            返回集合中的所有的成员。 不存在的集合 key 被视为空集合。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>集合中的所有成员。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SMove(System.String,System.String,System.Object)">
            <summary>
            将指定成员 member 元素从 source 集合移动到 destination 集合。
            SMOVE 是原子性操作。
            如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。
            当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。
            当 source 或 destination 不是集合类型时，返回一个错误。
            </summary>
            <param name="source">不含prefix前缀</param>
            <param name="destination">不含prefix前缀</param>
            <param name="memeber">成员</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SPop(System.String)">
            <summary>
            用于移除集合中的指定 key 的一个随机元素，移除后会返回移除的元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SPop(System.String,System.Int64)">
            <summary>
            用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>返回一个元素；如果集合为空，返回 nil 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中的一个或多个随机元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>那么返回一个数组；如果集合为空，返回空数组</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SRem``1(System.String,``0[])">
            <summary>
            于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。当 key 不是集合类型，返回一个错误。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SUnion(System.String[])">
            <summary>
            返回给定集合的并集。不存在的集合 key 被视为空集
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns>并集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SUnionStore(System.String,System.String[])">
            <summary>
            将给定集合的并集存储在指定的集合 destination 中。如果 destination 已经存在，则将其覆盖。 
            </summary>
            <param name="destination">指定的集合</param>
            <param name="keys">不含prefix前缀</param>
            <returns>结果集中的元素数量</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SScan(System.String,System.Int64,System.String,System.Int64)">
            <summary>
            用于迭代集合中键的元素，Sscan 继承自 Scan。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">匹配的模式</param>
            <param name="count">指定从数据集里返回多少元素，默认值为 10</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SDiff``1(System.String[])">
            <summary>
            返回第一个集合与其他集合之间的差异，也可以认为说第一个集合中独有的元素。不存在的集合 key 将视为空集。
            差集的结果来自前面的 FIRST_KEY, 而不是后面的 OTHER_KEY1，也不是整个 FIRST_KEY OTHER_KEY1..OTHER_KEYN 的差集。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">不含prefix前缀</param>
            <returns>包含差集成员的列表。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SInter``1(System.String[])">
            <summary>
            返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">不含prefix前缀</param>
            <returns>交集成员的列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SMembers``1(System.String)">
            <summary>
            返回集合中的所有的成员。 不存在的集合 key 被视为空集合。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>集合中的所有成员。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SPop``1(System.String)">
            <summary>
            用于移除集合中的指定 key 的一个随机元素，移除后会返回移除的元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SPop``1(System.String,System.Int64)">
            <summary>
            用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>返回一个元素；如果集合为空，返回 nil 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中的一个或多个随机元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>那么返回一个数组；如果集合为空，返回空数组</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SUnion``1(System.String[])">
            <summary>
            返回给定集合的并集。不存在的集合 key 被视为空集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">不含prefix前缀</param>
            <returns>并集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SScan``1(System.String,System.Int64,System.String,System.Int64)">
            <summary>
            用于迭代集合中键的元素，Sscan 继承自 Scan。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">匹配的模式</param>
            <param name="count">指定从数据集里返回多少元素，默认值为 10</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)。
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns>截取得到的子字符串</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GetSet(System.String,System.String)">
            <summary>
            设置指定 key 的值，并返回 key 的旧值。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns> 返回给定 key 的旧值。 当 key 没有旧值时，即 key 不存在时，返回 nil 。
            当 key 存在但不是字符串类型时，返回一个错误。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的字符串值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key"></param>
            <param name="offset"></param>
            <returns> 字符串值指定偏移量上的位(bit)。
            当偏移量 OFFSET 比字符串值的长度大，或者 key 不存在时，返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.MGet(System.String[])">
            <summary>
            返回所有(一个或多个)给定 key 的值。 如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil
            </summary>
            <param name="keys"></param>
            <returns>一个包含所有给定 key 的值的列表。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。
            </summary>
            <param name="key"></param>
            <param name="offset"></param>
            <param name="value"></param>
            <returns>指定偏移量原来储存的位。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SetRange(System.String,System.UInt32,System.String)">
            <summary>
            用指定的字符串覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始。
            </summary>
            <param name="key"></param>
            <param name="offset"></param>
            <param name="value"></param>
            <returns>被修改后的字符串长度。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.StrLen(System.String)">
            <summary>
            获取指定 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误。 
            </summary>
            <param name="key"></param>
            <returns>字符串值的长度。 当 key 不存在时，返回 0。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对。
            </summary>
            <param name="keyValues"></param>
            <returns>总是返回 true</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.MSetNx(System.Object[])">
            <summary>
            所有给定 key 都不存在时，同时设置一个或多个 key-value 对。 
            </summary>
            <param name="keyValues"></param>
            <returns>当所有 key 都成功设置，返回 true 。 如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 false 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Incr(System.String)">
            <summary>
            Redis Incr 命令将 key 中储存的数字值增一。
            如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。
            如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
            本操作的值限制在 64 位(bit)有符号数字表示之内。 
            </summary>
            <param name="key"></param>
            <returns>执行 INCR 命令之后 key 的值。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.IncrBy(System.String,System.Int64)">
            <summary>
            Redis Incrby 命令将 key 中储存的数字加上指定的增量值。
            如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY 命令。
            如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
            本操作的值限制在 64 位(bit)有符号数字表示之内。 
            </summary>
            <param name="key"></param>
            <param name="increment"></param>
            <returns>加上指定的增量值之后， key 的值。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.IncrByFloat(System.String,System.Decimal)">
            <summary>
            Redis Incrbyfloat 命令为 key 中所储存的值加上指定的浮点数增量值。
            如果 key 不存在，那么 INCRBYFLOAT 会先将 key 的值设为 0 ，再执行加法操作。 
            </summary>
            <param name="key"></param>
            <param name="increment"></param>
            <returns>执行命令之后 key 的值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Decr(System.String)">
            <summary>
            Redis Decr 命令将 key 中储存的数字值减一。
            如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECR 操作。
            如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
            本操作的值限制在 64 位(bit)有符号数字表示之内。 
            </summary>
            <param name="key"></param>
            <returns>执行命令之后 key 的值。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.DecrBy(System.String,System.Int64)">
            <summary>
            Redis Decrby 命令将 key 所储存的值减去指定的减量值。
            如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 DECRBY 操作。
            如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
            本操作的值限制在 64 位(bit)有符号数字表示之内。 
            </summary>
            <param name="key"></param>
            <param name="decrement"></param>
            <returns>减去指定减量值之后， key 的值。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Append(System.String,System.String)">
            <summary>
            Redis Append 命令用于为指定的 key 追加值。
            如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。
            如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>追加指定值之后， key 中字符串的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.Set``1(System.String,``0)">
            <summary>
            设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value"></param>
            <returns> 在 Redis 2.6.12 以前版本， SET 命令总是返回 OK 。
            从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 两个偏移量决定(包括 start 和 end 在内)。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start"></param>
            <param name="end"></param>
            <returns>截取得到的子字符串。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.GetSet``1(System.String,``0)">
            <summary>
            设置指定 key 的值，并返回 key 的旧值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value"></param>
            <returns> 返回给定 key 的旧值。 当 key 没有旧值时，即 key 不存在时，返回 nil 。
            当 key 存在但不是字符串类型时，返回一个错误。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.MGet``1(System.String[])">
            <summary>
            返回所有(一个或多个)给定 key 的值。 如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns>一个包含所有给定 key 的值的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SetEx``1(System.String,System.Int32,``0)">
            <summary>
            为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="seconds"></param>
            <param name="value"></param>
            <returns>设置成功时返回 OK 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.SetNx``1(System.String,``0)">
            <summary>
            在指定的 key 不存在时，为 key 设置指定的值。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value"></param>
            <returns>设置成功，返回 true 。 设置失败，返回 false 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.PSetEx``1(System.String,System.Int32,``0)">
            <summary>
            以毫秒为单位设置 key 的生存时间。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds"></param>
            <param name="value"></param>
            <returns>设置成功时返回 OK 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZAdd(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            将一个或多个成员元素及其分数值加入到有序集当中。
            如果某个成员已经是有序集的成员，那么更新这个成员的分数值，并通过重新插入这个成员元素，来保证该成员在正确的位置上。
            分数值可以是整数值或双精度浮点数。
            如果有序集合 key 不存在，则创建一个空的有序集并执行 ZADD 操作。
            当 key 存在但不是有序集类型时，返回一个错误。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员元素</param>
            <returns>被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZCard(System.String)">
            <summary>
            计算集合中元素的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns>当 key 存在且是有序集类型时，返回有序集的基数。 当 key 不存在时，返回 0 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZCount(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算有序集合中指定分数区间的成员数量。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">最小值（包含）</param>
            <param name="max">最大值（包含）</param>
            <returns>分数值在 min 和 max 之间的成员的数量。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZIncrBy(System.String,System.Decimal,System.String)">
            <summary>
            对有序集合中指定成员的分数加上增量 increment
            可以通过传递一个负数值 increment ，让分数减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。
            当 key 不存在，或分数不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。
            当 key 不是有序集类型时，返回一个错误。
            分数值可以是整数值或双精度浮点数。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="increment">增量</param>
            <param name="member">指定成员</param>
            <returns>member 成员的新分数值，以字符串形式表示。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZInterStore(System.String,System.Decimal[],WFw.Redis.RedisAggregateType,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination 。
            默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。 
            </summary>
            <param name="destination"> 新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregateType">Sum | Min | Max</param>
            <param name="keys"> 一个或多个有序集合，不含prefix前辍</param>
            <returns>保存到目标结果集的的成员数量。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZLexCount(System.String,System.String,System.String)">
            <summary>
             当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns>指定区间内的成员数量。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
             Redis Zrange 返回有序集中，指定区间内的成员。
             其中成员的位置按分数值递增(从小到大)来排序。
             具有相同分数值的成员按字典序(lexicographical order)来排列。
             如果你需要成员按值递减(从大到小)来排列，请使用 ZREVRANGE 命令。
             下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。
             你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start"> 开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop"> 结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max
            之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> '(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。
            具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。
            默认情况下，区间的取值使用闭区间(小于等于或大于等于)，你也可以通过给参数前增加(符号来使用可选的开区间 (小于或大于)。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRank(System.String,System.Object)">
            <summary>
             返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns>如果成员是有序集 key 的成员，返回 member 的排名。 如果成员不是有序集 key 的成员，返回 nil 。</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集中的一个或多个成员，不存在的成员将被忽略。
            当 key 存在但不是有序集类型时，返回一个错误。
            注意： 在 Redis 2.4 版本以前， ZREM 每次只能删除一个元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="members"> 一个或多个成员</param>
            <returns>被成功移除的成员的数量，不包括被忽略的成员。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的字典区间的所有成员。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> '(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns>被成功移除的成员的数量，不包括被忽略的成员。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            于移除有序集中，指定排名(rank)区间内的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>被移除成员的数量 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRemRangeByScore(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集中，指定分数（score）区间内的所有成员。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns>被移除成员的数量</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。
            排名以 0 为底，也就是说， 分数值最大的成员排名为 0 。
            使用 ZRANK 命令可以获得成员按分数值递增(从小到大)排列的排名。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns>如果成员是有序集 key 的成员，返回成员的排名。 如果成员不是有序集 key 的成员，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值。 如果成员元素不是有序集 key 的成员，或 key 不存在，返回 nil 。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns>成员的分数值</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZUnionStore(System.String,System.Decimal[],WFw.Redis.RedisAggregateType,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination 。
            默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和 。
            </summary>
            <param name="destination"> 新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregateType">Sum | Min | Max</param>
            <param name="keys"> 一个或多个有序集合，不含prefix前辍</param>
            <returns>保存到目标结果集的的成员数量。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素（包括元素成员和元素分值）
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">指定模式</param>
            <param name="count">数组长度</param>
            <returns>返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
             Redis Zrange 返回有序集中，指定区间内的成员。
             其中成员的位置按分数值递增(从小到大)来排序。
             具有相同分数值的成员按字典序(lexicographical order)来排列。
             如果你需要成员按值递减(从大到小)来排列，请使用 ZREVRANGE 命令。
             下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。
             你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start"> 开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop"> 结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max
            之间的成员。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> '(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。
            具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。
            默认情况下，区间的取值使用闭区间(小于等于或大于等于)，你也可以通过给参数前增加(符号来使用可选的开区间 (小于或大于)。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZRevRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.IRedisCache.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素（包括元素成员和元素分值）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">指定模式</param>
            <param name="count">数组长度</param>
            <returns>返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。 </returns>
        </member>
        <member name="T:WFw.Redis.GeoOrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="F:WFw.Redis.GeoOrderBy.ASC">
            <summary>
            查找结果根据距离从近到远排序。
            </summary>
        </member>
        <member name="F:WFw.Redis.GeoOrderBy.DESC">
            <summary>
            查找结果根据从远到近排序。
            </summary>
        </member>
        <member name="T:WFw.Redis.GeoUnit">
            <summary>
            geo距离单位
            </summary>
        </member>
        <member name="F:WFw.Redis.GeoUnit.m">
            <summary>
            米，默认
            </summary>
        </member>
        <member name="F:WFw.Redis.GeoUnit.km">
            <summary>
            千米
            </summary>
        </member>
        <member name="F:WFw.Redis.GeoUnit.mi">
            <summary>
            英里
            </summary>
        </member>
        <member name="F:WFw.Redis.GeoUnit.ft">
            <summary>
            英尺
            </summary>
        </member>
        <member name="T:WFw.Redis.KeyType">
            <summary>
            key 所储存的值的类型。
            </summary>
        </member>
        <member name="F:WFw.Redis.KeyType.None">
            <summary>
            key不存在
            </summary>
        </member>
        <member name="F:WFw.Redis.KeyType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:WFw.Redis.KeyType.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:WFw.Redis.KeyType.Set">
            <summary>
            合集
            </summary>
        </member>
        <member name="F:WFw.Redis.KeyType.ZSet">
            <summary>
            有序合集
            </summary>
        </member>
        <member name="F:WFw.Redis.KeyType.Hash">
            <summary>
            哈希表
            </summary>
        </member>
        <member name="F:WFw.Redis.KeyType.Stream">
            <summary>
            stream
            </summary>
        </member>
        <member name="T:WFw.Redis.RedisAggregateType">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Redis.RedisAggregateType.Sum">
            <summary>
             Aggregate SUM  
            </summary>
        </member>
        <member name="F:WFw.Redis.RedisAggregateType.Min">
            <summary>
            Aggregate MIN 
            </summary>
        </member>
        <member name="F:WFw.Redis.RedisAggregateType.Max">
            <summary>
             Aggregate MAX
            </summary>
        </member>
        <member name="T:WFw.Redis.ScanResult`1">
            <summary>
            scan结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WFw.Redis.ScanResult`1.Cursor">
            <summary>
            指针
            </summary>
        </member>
        <member name="P:WFw.Redis.ScanResult`1.Items">
            <summary>
            值
            </summary>
        </member>
        <member name="T:WFw.Redis.Options.ConfigurationOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Server">
            <summary>
            IP:PORT
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Password">
            <summary>
            Redis server password
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.DefaultDatabase">
            <summary>
            Redis server database
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.AsyncPipeline">
            <summary>
            The asynchronous method automatically uses pipeline, and the 10W concurrent time is 450ms (welcome to feedback)
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Poolsize">
            <summary>
            Connection pool size
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.IdleTimeout">
            <summary>
            Idle time of elements in the connection pool (MS), suitable for connecting to remote redis server
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.ConnectTimeout">
            <summary>
            Connection timeout (MS)
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.SyncTimeout">
            <summary>
            Send / receive timeout (MS)
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Preheat">
            <summary>
            Preheat connections, receive values such as preheat = 5 preheat 5 connections
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.AutoDispose">
            <summary>
            Follow system exit event to release automatically
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.SSL">
            <summary>
            Enable encrypted transmission
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Testcluster">
            <summary>
            是否尝试集群模式，阿里云、腾讯云集群需要设置此选项为 false
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Tryit">
            <summary>
            Execution error, retry attempts
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Name">
            <summary>
            Connection name, use client list command to view
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.ConfigurationOptions.Prefix">
            <summary>
            key前辍，所有方法都会附带此前辍
            </summary>
        </member>
        <member name="M:WFw.Redis.Options.ConfigurationOptions.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.Redis.Options.RedisOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.RedisOptions.Value">
            <summary>
            
            </summary>
        </member>
        <member name="F:WFw.Redis.Options.RedisOptions.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.RedisOptions.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:WFw.Redis.Options.RedisOptions.ConfigurationOptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:WFw.Redis.Options.RedisOptions.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:WFw.Redis.WFwRedisCache">
            <summary>
            connection
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            hash
            </summary>
            <summary>
            HyperLogLog
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            lua
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            set
            </summary>
            <summary>
            set
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            tran
            </summary>
            <summary>
            sortedset
            </summary>
            <summary>
            sortedset
            </summary>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Echo(System.String)">
            <summary>
            打印给定的字符串。
            </summary>
            <param name="msg">给定的字符串</param>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Ping">
            <summary>
            命令使用客户端向 Redis 服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 PONG 
            </summary>
            <returns>如果连接正常就返回一个 true ，否则返回一个连接错误</returns>
        </member>
        <member name="F:WFw.Redis.WFwRedisCache.SlidingSecsField">
            <summary>
            滑动过期时间
            </summary>
        </member>
        <member name="F:WFw.Redis.WFwRedisCache.ValueField">
            <summary>
            绝对值过期时间
            </summary>
        </member>
        <member name="F:WFw.Redis.WFwRedisCache.expireSettingKeyDelay">
            <summary>
            时间对象延迟时间(秒)
            </summary>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.#ctor(Microsoft.Extensions.Options.IOptions{WFw.Redis.Options.RedisOptions})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GetExpireSettingKey(System.String)">
            <summary>
            非string获得过期设置key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ExpireKey(System.String)">
            <summary>
            延时string
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Remove(System.String[])">
            <summary>
            删除键
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Set``1(System.String,``0,WFw.Cache.CacheItemOptions)">
            <summary>
            保存对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Get``1(System.String)">
            <summary>
            获得对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GetValue``1(System.String)">
            <summary>
            获得对象值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoAdd(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoDist(System.String,System.Object,System.Object,WFw.Redis.GeoUnit)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="member1"></param>
            <param name="member2"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoPos(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadius(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusWithDist(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusWithDistAndCoord(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusByMember(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusByMemberWithDist(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="member"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoHash(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadius``1(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusWithDist``1(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusWithDistAndCoord``1(System.String,System.Decimal,System.Decimal,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusByMember``1(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="member"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="member"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Decimal,WFw.Redis.GeoUnit,System.Nullable{System.Int64},System.Nullable{WFw.Redis.GeoOrderBy})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="member"></param>
            <param name="radius"></param>
            <param name="unit"></param>
            <param name="count"></param>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HDel(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HExists(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HGet``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HGetValue``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HGetAll``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <param name="increment"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <param name="increment"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HKeys(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HLen(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HmGet``1(System.String,System.String[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HmSet(System.String,System.Object[],WFw.Cache.CacheItemOptions)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="keyValues"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HSet``1(System.String,System.String,``0,WFw.Cache.CacheItemOptions)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HSetNx``1(System.String,System.String,``0,WFw.Cache.CacheItemOptions)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HVals``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.HScan``1(System.String,System.Int64,System.String,System.Int64)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="cursor"></param>
            <param name="pattern"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.PfAdd``1(System.String,``0[])">
            <summary>
            将所有元素参数添加到 HyperLogLog 数据结构中。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="elements">元素参数</param>
            <returns>如果至少有个元素被添加返回 1， 否则返回 0。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值。注意：分区模式下，若keys分散在多个分区节点时，将报错。
            </summary>
            <param name="keys"></param>
            <returns>返回给定 HyperLogLog 的基数值，如果多个 HyperLogLog 则返回基数估值之和。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns>返回true。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Del(System.String[])">
            <summary>
            
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Dump(System.String)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Expire(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="seconds">过期时间(秒)</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ExpireAt(System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.PExpire(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="milliseconds">过期时间(毫秒)</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.PExpireAt(System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Keys(System.String)">
            <summary>
            
            </summary>
            <param name="pattern">给定模式</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Move(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="db">数据库</param>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.PTtl(System.String)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Ttl(System.String)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RandomKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Rename(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">旧key，不含prefix前缀</param>
            <param name="newKey">新key，不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RenameNx(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">旧key，不含prefix前缀</param>
            <param name="newKey">新key，不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Scan(System.Int64,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="pattern"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Type(System.String)">
            <summary>
            
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.BLPop(System.Int32,System.String[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.BRPop(System.Int32,System.String[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <param name="timeout">超时(秒)</param>
            <returns>假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 否则，返回被弹出元素的值。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="index">索引</param>
            <returns>列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。
            当列表不存在时，被视为空列表，不执行任何操作。
            如果 key 不是列表类型，返回一个错误。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="pivot">列表元素</param>
            <param name="value">新元素</param>
            <returns>如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。
            当列表不存在时，被视为空列表，不执行任何操作。
            如果 key 不是列表类型，返回一个错误。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="pivot">列表元素</param>
            <param name="value">新元素</param>
            <returns>如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LLen(System.String)">
            <summary>
            返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 如果 key 不是列表类型，返回一个错误
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LPop(System.String)">
            <summary>
            移除并返回列表的第一个元素。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>列表的第一个元素。 当列表 key 不存在时，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LPush``1(System.String,``0[])">
            <summary>
            命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="values">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LPushX``1(System.String,``0)">
            <summary>
             将一个值插入到已存在的列表头部，列表不存在时操作无效。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="value">值</param>
            <returns>LPUSHX 命令执行之后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="start">开始位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <param name="stop">结束位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <returns>一个列表，包含指定区间内的元素。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LRem(System.String,System.Int64,System.Object)">
            <summary>
             Redis Lrem 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。
             COUNT 的值可以是以下几种：<![CDATA[
                 count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
                 count< 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
                 count = 0 : 移除表中所有与 VALUE 相等的值。]]>
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="count"> <![CDATA[
            count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
            count< 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
            count = 0 : 移除表中所有与 VALUE 相等的值。]]></param>
            <param name="value">值</param>
            <returns>被移除元素的数量。 列表不存在时返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引来设置元素的值。
            当索引参数超出范围，或对一个空列表进行 LSET 时，返回一个错误。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns>操作成功返回 ok ，否则返回错误信息。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
            下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>命令执行成功时，返回 ok 。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RPop(System.String)">
            <summary>
            移除列表的最后一个元素，返回值为移除的元素。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns> 被移除的元素。
            当列表不存在时，返回 nil</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RPopLPush(System.String,System.String)">
            <summary>
            移除列表的最后一个元素，并将该元素添加到另一个列表并返回。 
            </summary>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <returns>被弹出的元素。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RPush``1(System.String,``0[])">
            <summary>
            命令将一个或多个值插入到列表尾部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="values">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RPushX``1(System.String,``0)">
            <summary>
             将一个值插入到已存在的列表尾部，列表不存在时操作无效。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="value">值</param>
            <returns>RPUSHX 命令执行之后，列表的长度。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.BLPop``1(System.Int32,System.String[])">
            <summary>
            移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.BRPop``1(System.Int32,System.String[])">
            <summary>
            移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">不含prefix前缀</param>
            <returns>如果列表为空，返回一个 nil 。 否则，返回被弹出元素的值。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            从列表中取出最后一个元素，并插入到另外一个列表的头部； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <param name="timeout">超时(秒)</param>
            <returns>假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 否则，返回被弹出元素的值。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="index">索引</param>
            <returns>列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LPop``1(System.String)">
            <summary>
            移除并返回列表的第一个元素。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>列表的第一个元素。 当列表 key 不存在时，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="start">开始位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <param name="stop">结束位置，0 表示列表的第一个元素，-1 表示列表的最后一个元素</param>
            <returns>一个列表，包含指定区间内的元素。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RPop``1(System.String)">
            <summary>
            移除列表的最后一个元素，返回值为移除的元素。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <returns> 被移除的元素。
            当列表不存在时，返回 nil</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.RPopLPush``1(System.String,System.String)">
            <summary>
            移除列表的最后一个元素，并将该元素添加到另一个列表并返回。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">源列表Key,不含prefix前缀</param>
            <param name="destination">目标列表Key,不含prefix前缀</param>
            <returns>被弹出的元素。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Eval(System.String,System.String,System.Object[])">
            <summary>
            使用 Lua 解释器执行脚本。
            </summary>
            <param name="script"> Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            根据给定的 sha1 校验码，执行缓存在服务器中的脚本。
            将脚本缓存到服务器的操作可以通过 SCRIPT LOAD 命令进行。
            </summary>
            <param name="sha1"> 通过 SCRIPT LOAD 生成的 sha1 校验码。</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args"></param>
            <returns>附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ScriptExists(System.String[])">
            <summary>
            用于校验指定的脚本是否已经被保存在缓存当中。
            </summary>
            <param name="sha1s">通过 SCRIPT LOAD 生成的 sha1 校验码。</param>
            <returns> 一个列表，包含 0 和 1 ，前者表示脚本不存在于缓存，后者表示脚本已经在缓存里面了。
            列表中的元素和给定的 SHA1 校验和保持对应关系，比如列表的第三个元素的值就表示第三个 SHA1 校验和所指定的脚本在缓存中的状态。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ScriptFlush">
            <summary>
            清除所有 Lua 脚本缓存。
            </summary>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ScriptKill">
            <summary>
            杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。
            这个命令主要用于终止运行时间过长的脚本，比如一个因为 BUG 而发生无限循环的脚本。
            SCRIPT KILL 执行之后，当前正在运行的脚本会被杀死，执行这个脚本的客户端会从 EVAL 命令的阻塞当中退出，并收到一个错误作为返回值。 
            </summary>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ScriptLoad(System.String)">
            <summary>
            用于将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。
            EVAL 命令也会将脚本添加到脚本缓存中，但是它会立即对输入的脚本进行求值。
            如果给定的脚本已经在缓存里面了，那么不执行任何操作。
            在脚本被加入到缓存之后，通过 EVALSHA 命令，可以使用脚本的 SHA1 校验和来调用这个脚本。
            脚本可以在缓存中保留无限长的时间，直到执行 SCRIPT FLUSH 为止。 
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SAdd``1(System.String,``0[])">
            <summary>
            将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。
            假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。
            当集合 key 不是集合类型时，返回一个错误。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="members">一个或多个成员</param>
            <returns>被添加到集合中的新元素的数量，不包括被忽略的元素。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Scard(System.String)">
            <summary>
            返回集合中元素的数量。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>集合的数量。 当集合 key 不存在时，返回 0 。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SDiff(System.String[])">
            <summary>
            返回第一个集合与其他集合之间的差异，也可以认为说第一个集合中独有的元素。不存在的集合 key 将视为空集。
            差集的结果来自前面的 FIRST_KEY, 而不是后面的 OTHER_KEY1，也不是整个 FIRST_KEY OTHER_KEY1..OTHER_KEYN 的差集。
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns>包含差集成员的列表。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SDiffStore(System.String,System.String[])">
            <summary>
            将给定集合之间的差集存储在指定的集合中。如果指定的集合 key 已存在，则会被覆盖
            </summary>
            <param name="destination">指定的集合</param>
            <param name="keys">不含prefix前缀</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SInter(System.String[])">
            <summary>
            返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。 
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns>交集成员的列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SInterStore(System.String,System.String[])">
            <summary>
            将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖。
            </summary>
            <param name="destination">指定的集合</param>
            <param name="keys">不含prefix前缀</param>
            <returns>返回存储交集的集合的元素数量</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SIsMember``1(System.String,``0)">
            <summary>
            判断成员元素是否是集合的成员。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="member">成员</param>
            <returns>如果成员元素是集合的成员，返回 1 。 如果成员元素不是集合的成员，或 key 不存在，返回 0</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SMembers(System.String)">
            <summary>
            返回集合中的所有的成员。 不存在的集合 key 被视为空集合。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>集合中的所有成员。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SMove(System.String,System.String,System.Object)">
            <summary>
            将指定成员 member 元素从 source 集合移动到 destination 集合。
            SMOVE 是原子性操作。
            如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。
            当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。
            当 source 或 destination 不是集合类型时，返回一个错误。
            </summary>
            <param name="source">不含prefix前缀</param>
            <param name="destination">不含prefix前缀</param>
            <param name="memeber">成员</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SPop(System.String)">
            <summary>
            用于移除集合中的指定 key 的一个随机元素，移除后会返回移除的元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SPop(System.String,System.Int64)">
            <summary>
            用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <returns>返回一个元素；如果集合为空，返回 nil 。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中的一个或多个随机元素。
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>那么返回一个数组；如果集合为空，返回空数组</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SRem``1(System.String,``0[])">
            <summary>
            于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。当 key 不是集合类型，返回一个错误。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SUnion(System.String[])">
            <summary>
            返回给定集合的并集。不存在的集合 key 被视为空集
            </summary>
            <param name="keys">不含prefix前缀</param>
            <returns>并集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SUnionStore(System.String,System.String[])">
            <summary>
            将给定集合的并集存储在指定的集合 destination 中。如果 destination 已经存在，则将其覆盖。 
            </summary>
            <param name="destination">指定的集合</param>
            <param name="keys">不含prefix前缀</param>
            <returns>结果集中的元素数量</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SScan(System.String,System.Int64,System.String,System.Int64)">
            <summary>
            用于迭代集合中键的元素，Sscan 继承自 Scan。 
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">匹配的模式</param>
            <param name="count">指定从数据集里返回多少元素，默认值为 10</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SDiff``1(System.String[])">
            <summary>
            返回第一个集合与其他集合之间的差异，也可以认为说第一个集合中独有的元素。不存在的集合 key 将视为空集。
            差集的结果来自前面的 FIRST_KEY, 而不是后面的 OTHER_KEY1，也不是整个 FIRST_KEY OTHER_KEY1..OTHER_KEYN 的差集。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">不含prefix前缀</param>
            <returns>包含差集成员的列表。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SInter``1(System.String[])">
            <summary>
            返回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">不含prefix前缀</param>
            <returns>交集成员的列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SMembers``1(System.String)">
            <summary>
            返回集合中的所有的成员。 不存在的集合 key 被视为空集合。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>集合中的所有成员。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SPop``1(System.String)">
            <summary>
            用于移除集合中的指定 key 的一个随机元素，移除后会返回移除的元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SPop``1(System.String,System.Int64)">
            <summary>
            用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>被移除的随机元素。 当集合不存在或是空集时，返回 nil </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <returns>返回一个元素；如果集合为空，返回 nil 。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中的一个或多个随机元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="count">一个或多个随机元素</param>
            <returns>那么返回一个数组；如果集合为空，返回空数组</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SUnion``1(System.String[])">
            <summary>
            返回给定集合的并集。不存在的集合 key 被视为空集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys">不含prefix前缀</param>
            <returns>并集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SScan``1(System.String,System.Int64,System.String,System.Int64)">
            <summary>
            用于迭代集合中键的元素，Sscan 继承自 Scan。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">匹配的模式</param>
            <param name="count">指定从数据集里返回多少元素，默认值为 10</param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GetSet(System.String,System.String)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的字符串值，获取指定偏移量上的位(bit)。
            </summary>
            <param name="key"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.MGet(System.String[])">
            <summary>
            获取所有(一个或多个)给定 key 的值。 
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。
            </summary>
            <param name="key"></param>
            <param name="offset"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SetRange(System.String,System.UInt32,System.String)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。
            </summary>
            <param name="key"></param>
            <param name="offset"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.MSetNx(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Incr(System.String)">
            <summary>
            将 key 中储存的数字值增一。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment） 。
            </summary>
            <param name="key"></param>
            <param name="increment"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.IncrByFloat(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment） 。 
            </summary>
            <param name="key"></param>
            <param name="increment"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Decr(System.String)">
            <summary>
            将 key 中储存的数字值减一。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.DecrBy(System.String,System.Int64)">
            <summary>
            key 所储存的值减去给定的减量值（decrement） 。
            </summary>
            <param name="key"></param>
            <param name="decrement"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Append(System.String,System.String)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.Set``1(System.String,``0)">
            <summary>
            设置指定 key 的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.GetSet``1(System.String,``0)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.MGet``1(System.String[])">
            <summary>
             获取所有(一个或多个)给定 key 的值。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SetEx``1(System.String,System.Int32,``0)">
            <summary>
            将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="seconds"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.SetNx``1(System.String,``0)">
            <summary>
            只有在 key 不存在时设置 key 的值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.PSetEx``1(System.String,System.Int32,``0)">
            <summary>
            以毫秒为单位设置 key 的生存时间。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="milliseconds"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZAdd(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            将一个或多个成员元素及其分数值加入到有序集当中。
            如果某个成员已经是有序集的成员，那么更新这个成员的分数值，并通过重新插入这个成员元素，来保证该成员在正确的位置上。
            分数值可以是整数值或双精度浮点数。
            如果有序集合 key 不存在，则创建一个空的有序集并执行 ZADD 操作。
            当 key 存在但不是有序集类型时，返回一个错误。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员元素</param>
            <returns>被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZCard(System.String)">
            <summary>
            计算集合中元素的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns>当 key 存在且是有序集类型时，返回有序集的基数。 当 key 不存在时，返回 0 。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZCount(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算有序集合中指定分数区间的成员数量。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">最小值（包含）</param>
            <param name="max">最大值（包含）</param>
            <returns>分数值在 min 和 max 之间的成员的数量。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZIncrBy(System.String,System.Decimal,System.String)">
            <summary>
            对有序集合中指定成员的分数加上增量 increment
            可以通过传递一个负数值 increment ，让分数减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。
            当 key 不存在，或分数不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。
            当 key 不是有序集类型时，返回一个错误。
            分数值可以是整数值或双精度浮点数。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="increment">增量</param>
            <param name="member">指定成员</param>
            <returns>member 成员的新分数值，以字符串形式表示。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZInterStore(System.String,System.Decimal[],WFw.Redis.RedisAggregateType,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination 。
            默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。 
            </summary>
            <param name="destination"> 新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregateType">Sum | Min | Max</param>
            <param name="keys"> 一个或多个有序集合，不含prefix前辍</param>
            <returns>保存到目标结果集的的成员数量。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZLexCount(System.String,System.String,System.String)">
            <summary>
             当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns>指定区间内的成员数量。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
             Redis Zrange 返回有序集中，指定区间内的成员。
             其中成员的位置按分数值递增(从小到大)来排序。
             具有相同分数值的成员按字典序(lexicographical order)来排列。
             如果你需要成员按值递减(从大到小)来排列，请使用 ZREVRANGE 命令。
             下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。
             你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start"> 开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop"> 结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max
            之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> '(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。
            具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。
            默认情况下，区间的取值使用闭区间(小于等于或大于等于)，你也可以通过给参数前增加(符号来使用可选的开区间 (小于或大于)。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRank(System.String,System.Object)">
            <summary>
             返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns>如果成员是有序集 key 的成员，返回 member 的排名。 如果成员不是有序集 key 的成员，返回 nil 。</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集中的一个或多个成员，不存在的成员将被忽略。
            当 key 存在但不是有序集类型时，返回一个错误。
            注意： 在 Redis 2.4 版本以前， ZREM 每次只能删除一个元素。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="members"> 一个或多个成员</param>
            <returns>被成功移除的成员的数量，不包括被忽略的成员。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的字典区间的所有成员。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> '(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns>被成功移除的成员的数量，不包括被忽略的成员。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            于移除有序集中，指定排名(rank)区间内的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>被移除成员的数量 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRemRangeByScore(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集中，指定分数（score）区间内的所有成员。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns>被移除成员的数量</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。
            排名以 0 为底，也就是说， 分数值最大的成员排名为 0 。
            使用 ZRANK 命令可以获得成员按分数值递增(从小到大)排列的排名。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns>如果成员是有序集 key 的成员，返回成员的排名。 如果成员不是有序集 key 的成员，返回 nil 。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值。 如果成员元素不是有序集 key 的成员，或 key 不存在，返回 nil 。 
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns>成员的分数值</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZUnionStore(System.String,System.Decimal[],WFw.Redis.RedisAggregateType,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination 。
            默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和 。
            </summary>
            <param name="destination"> 新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregateType">Sum | Min | Max</param>
            <param name="keys"> 一个或多个有序集合，不含prefix前辍</param>
            <returns>保存到目标结果集的的成员数量。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素（包括元素成员和元素分值）
            </summary>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">指定模式</param>
            <param name="count">数组长度</param>
            <returns>返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
             Redis Zrange 返回有序集中，指定区间内的成员。
             其中成员的位置按分数值递增(从小到大)来排序。
             具有相同分数值的成员按字典序(lexicographical order)来排列。
             如果你需要成员按值递减(从大到小)来排列，请使用 ZREVRANGE 命令。
             下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。
             你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start"> 开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop"> 结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max
            之间的成员。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> '(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。
            具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。
            默认情况下，区间的取值使用闭区间(小于等于或大于等于)，你也可以通过给参数前增加(符号来使用可选的开区间 (小于或大于)。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit"> 返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内的元素列表</returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中，指定区间内的成员。
            其中成员的位置按分数值递减(从大到小)来排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max"> 分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZRevRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。
            具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
            除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min"> 分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns>指定区间内，带有分数值(可选)的有序集成员的列表。 </returns>
        </member>
        <member name="M:WFw.Redis.WFwRedisCache.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素（包括元素成员和元素分值）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">不含prefix前缀</param>
            <param name="cursor">游标</param>
            <param name="pattern">指定模式</param>
            <param name="count">数组长度</param>
            <returns>返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。 </returns>
        </member>
    </members>
</doc>
